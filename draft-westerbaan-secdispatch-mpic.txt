



Security Dispatch                                          B. Westerbaan
Internet-Draft                                                Cloudflare
Intended status: Informational                            14 August 2024
Expires: 15 February 2025


        Multi-Perspective Issuance Corroboration (MPIC) Service
                draft-westerbaan-secdispatch-mpic-latest

Abstract

   This memo defines an API for a service to offer multi-perspective
   issuance corroboration (MPIC) for domain control validation.

   TODO CA/B context.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://bwesterb.github.io/draft-mpic/draft-westerbaan-secdispatch-
   mpic.html.  Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-westerbaan-secdispatch-mpic/.

   Discussion of this document takes place on the Security Dispatch
   Working Group mailing list (mailto:secdispatch@ietf.org), which is
   archived at https://mailarchive.ietf.org/arch/browse/secdispatch/.
   Subscribe at https://www.ietf.org/mailman/listinfo/secdispatch/.

   Source for this draft and an issue tracker can be found at
   https://github.com/bwesterb/draft-mpic.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 15 February 2025.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  API
     3.1.  caa method
     3.2.  http method
     3.3.  dns method
   4.  Operation
   5.  Authentication
   6.  Security Considerations
   7.  IANA Considerations
   8.  Normative References
   Acknowledgments
   Author's Address

1.  Introduction

   TODO References to CA/B

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  API

   A service is identified by a HTTPS url.  As a running example, say
   https://mpc.example.com/staging.

   A client requests an MPIC from the service by sending a POST request
   to the resource /mpic/draft-00 below the service URL.  In the running
   example https://mpc.example.com/staging/mpic/draft-00.

   [[ The final version of the API will use /mpic/v1.  Incompatible
   versions of the draft will bump the -00. ]]

   The body of the POST is a JSON object that described the MPIC
   request.  The service will respond with a JSON object.  There are
   three different method, described below.  The request object has a
   method field that distinguishes the method.

3.1.  caa method

   A caa requests asks the MPIC service to retrieve the relevant CAA DNS
   records for a given domain from multiple vantage points.

   The request object has the following specific fields.

   *  domain The domain to check the CAA records for.

   If successful (described in TODO REF below), the response object
   contains a ok field set to true, and an caa field, which itself is an
   object with two fields:

   *  domain The domain on which the CAA records were found.  This could
      be a parent domain of the requested domain.

   *  records A list of base64 encoded CAA records.

   On failure, the response object will have the ok field set to false,
   and an error field describing the error.

   [[ TODO do we to define the possible errors, or at least assign some
   codes? ]]

   An example request is given below

   POST /staging/mpic/draft-00
   Host: mpc.example.com
   Content-Type: application/json

   {
    "method": "caa",
    "domain": "some.example.com"
   }

   An example of a response for a succesful validation.

   {
    "ok": true,
    "caa": {
     "domain": "example.com",
     "records": ["AAVpc3N1ZWxldHNlbmNyeXB0Lm9yZw=="]
    }
   }

   An example of a response for an unsuccesful validation.

{
 "ok": false,
 "error": "LIS sawrecord 'xyz' on example.com which was not present from vantage point LIS"
}

   [[ TODO How much information to return on error to help debug, and
   how structured should it be?  I'd say it's good to be helpful, but
   it's bad to be structured as it's less readable. ]]

3.2.  http method

   TODO

   Performs a GET from multiple vantage points, and checks whether the
   body matches expectation.

   Required request fields

   *  domain

   *  path

   *  expected Expected body [[ TODO what if it's not UTF-8? ]]

   Makes request to http://[domain][path].

   Optional request fields

   *  caa Performs CAA validation at the same time for the domain as
      described above.  Defaults to true.

   Response object.

   Contains ok and error as in caa method.

   If caa was set to true, contains caa field as described above.

   TODO example

3.3.  dns method

   Required request fields

   *  domain

   *  record-type

   *  prefix

   *  expected

   Optional

   *  caa Defaults to true.

   Response is same as with http.

4.  Operation

   TODO describe operation of each.

5.  Authentication

   Describe usage of Authorization header.

6.  Security Considerations

   TODO Security

7.  IANA Considerations

   This document has no IANA actions.

8.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

Acknowledgments

   TODO acknowledge.

Author's Address

   Bas Westerbaan
   Cloudflare
   Email: bas@cloudflare.com
