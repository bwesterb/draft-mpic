



Security Dispatch                                            S. S. Ahmad
Internet-Draft                                             B. Westerbaan
Intended status: Informational                                Cloudflare
Expires: 22 February 2025                                 21 August 2024


        Multi-Perspective Issuance Corroboration (MPIC) Service
                draft-westerbaan-secdispatch-mpic-latest

Abstract

   This memo defines an API for a service to offer multi-perspective
   issuance corroboration (MPIC) for domain control validation.  Ballot
   SC-67 v3 of CA/B forum requires MPIC to be performed by all
   certification authorities (CAs) in the Web PKI.

About This Document

   This note is to be removed before publishing as an RFC.

   The latest revision of this draft can be found at
   https://bwesterb.github.io/draft-mpic/draft-westerbaan-secdispatch-
   mpic.html.  Status information for this document may be found at
   https://datatracker.ietf.org/doc/draft-westerbaan-secdispatch-mpic/.

   Discussion of this document takes place on the Security Dispatch
   Working Group mailing list (mailto:secdispatch@ietf.org), which is
   archived at https://mailarchive.ietf.org/arch/browse/secdispatch/.
   Subscribe at https://www.ietf.org/mailman/listinfo/secdispatch/.

   Source for this draft and an issue tracker can be found at
   https://github.com/bwesterb/draft-mpic.

Status of This Memo

   This Internet-Draft is submitted in full conformance with the
   provisions of BCP 78 and BCP 79.

   Internet-Drafts are working documents of the Internet Engineering
   Task Force (IETF).  Note that other groups may also distribute
   working documents as Internet-Drafts.  The list of current Internet-
   Drafts is at https://datatracker.ietf.org/drafts/current/.

   Internet-Drafts are draft documents valid for a maximum of six months
   and may be updated, replaced, or obsoleted by other documents at any
   time.  It is inappropriate to use Internet-Drafts as reference
   material or to cite them other than as "work in progress."

   This Internet-Draft will expire on 22 February 2025.

Copyright Notice

   Copyright (c) 2024 IETF Trust and the persons identified as the
   document authors.  All rights reserved.

   This document is subject to BCP 78 and the IETF Trust's Legal
   Provisions Relating to IETF Documents (https://trustee.ietf.org/
   license-info) in effect on the date of publication of this document.
   Please review these documents carefully, as they describe your rights
   and restrictions with respect to this document.  Code Components
   extracted from this document must include Revised BSD License text as
   described in Section 4.e of the Trust Legal Provisions and are
   provided without warranty as described in the Revised BSD License.

Table of Contents

   1.  Introduction
   2.  Conventions and Definitions
   3.  API Structure
     3.1.  caa validation method
     3.2.  http method
     3.3.  dns method
   4.  Operation
   5.  Authentication
   6.  Security Considerations
   7.  IANA Considerations
   8.  Normative References
   Acknowledgments
   Authors' Addresses

1.  Introduction

   The Web PKI infrastructure provides the foundation for securing
   communications across the Internet.  At the core of this model are
   certificates, issued by Certification Authorities (CAs), which are
   used to authenticate domain names.  For certificate issuance, a CA is
   required to verify that the applicant requesting a certificate is in
   authority of the provided domain.  Automatic Certificate Management
   Environment (ACME) protocol [RFC8555] provides a simplified and
   automated certificate issuance mechanism such as placing a CA-
   provided challenge on a web server, or adding a new DNS record for
   the domain.  However, this process generally involves a single
   vantage-point validation mechanism which opens door for DNS
   hijacking, phishing, and other types of attack that can allow
   unauthorized entities to pass validation.

   This document introduces Multi-Path Issuance Collaboration (MPIC), a
   framework designed to leverage distributed trust and multiple
   independent paths for certificate issuance validation.  Use of MPIC
   by CAs can ensure that no single point of compromise exists in the
   validation chain, and reduces the risk of certificate misissuance.
   The framework further extends to provide multi-path CAA record
   validation to help ensure that CAs are authorized to issue a
   certificate for the domain.

   Notably, the CA/B Forum Ballot SC-67 v3 requires all CAs to perform
   MPIC for certificate issuance.  This industry-wide mandate
   underscores the importance of multi-path validation approach to
   enhance the overall security and resilience of Web PKI
   infrastructure.

2.  Conventions and Definitions

   The key words "MUST", "MUST NOT", "REQUIRED", "SHALL", "SHALL NOT",
   "SHOULD", "SHOULD NOT", "RECOMMENDED", "NOT RECOMMENDED", "MAY", and
   "OPTIONAL" in this document are to be interpreted as described in
   BCP 14 [RFC2119] [RFC8174] when, and only when, they appear in all
   capitals, as shown here.

3.  API Structure

   The MPIC API implements a system for domain validation and CAA record
   checking using multiple perspectives across different regions.

   A MPIC service is identified by a HTTPS url.  As a running example,
   say https://mpc.example.com/staging.

   A client requests a MPIC validation from the service by sending a
   POST request to the resource /mpic/draft-00 below the service URL.
   In the running example https://mpc.example.com/staging/mpic/draft-00.

   [[ The final version of the API will use /mpic/v1.  Incompatible
   versions of the draft will bump the -00. ]]

   The body of the HTTP POST is a JSON object that describs the MPIC
   request.  The service will respond with a JSON object containing MPIC
   results.

   There are three different MPIC validation methods, described below.
   The request object has a method field that allows to distinguish
   between each.

3.1.  caa validation method

   A caa requests asks the MPIC service to retrieve the relevant CAA DNS
   records for a given domain from multiple vantage points.

   This method has the following specific fields.

   *  domain (required, string): The domain to check the CAA records
      for.

   An example request is given below.

   POST /staging/mpic/draft-00
   Host: mpc.example.com
   Content-Type: application/json

   {
    "method": "caa",
    "domain": "some.example.com"
   }

   If successful (described in TODO REF below), the response object
   contains a success field set to true, and an caa field, which itself
   is an object with two fields:

   *  domain The domain on which the CAA records were found.  This could
      be a parent domain of the requested domain.

   *  records A list of base64 encoded CAA records.

   An example of a response for a succesful validation.

   {
    "success": true,
    "caa": {
     "domain": "example.com",
     "records": ["AAVpc3N1ZWxldHNlbmNyeXB0Lm9yZw=="]
    }
   }

   On failure, the response object will have the success field set to
   false, and an error field describing the error.

   [[ TODO do we to define the possible errors, or at least assign some
   codes? ]]

   An example of a response for an unsuccesful validation.

{
 "success": false,
 "error": "LIS saw record 'xyz' on example.com which was not present from vantage point LIS"
}

   [[ TODO How much information to return on error to help debug, and
   how structured should it be?  I'd say it's good to be helpful, but
   it's bad to be structured as it's less readable. ]]

3.2.  http method

   A http requests the MPIC server to perform ACME HTTP challenge
   validation [RFC8555] for the domain's HTTP server from each
   distributed vantage point.

   Performs a GET from multiple vantage points, and checks whether the
   body matches expectation.  Optionally, it allows performing an
   additional CAA record lookup for the domain.

   The request JSON object has the following specific fields.

   *  domain (required, string): The domain name being verified.

   *  path (required, string): The path at which the ACME HTTP challenge
      resource is provisioned.

   *  expected (required, string): Expected body of the response [[ TODO
      what if it's not UTF-8? ]]

   *  caa-check (optional, boolean): Performs CAA validation at the same
      time for the domain as described above.  Defaults to true.

   POST /staging/mpic/draft-00
   Host: mpc.example.com
   Content-Type: application/json

   {
    "method": "http",
    "domain": "some.example.com",
    "path": ".well-known/acme-challenge/token",
    "expected": "challenge_token",
    "caa-check": false,
   }

   The MPIC server constructs a URL by populating the URL template
   [RFC6570], http://{domain}/{path}, and verifies that the resulting
   URL is well-formed, before making a HTTP GET request to the URL from
   each vantage point.  Each vantage point SHOULD follow redirects when
   dereferencing the URL.  The MPIC server verifies that expected value
   provided by the client matches with the body of the response received
   from each vantage point.

   If the above verifications succeeds, then the validation is
   successful.  If the request fails, or the body does not pass these
   checks, then it has failed.

   Along side, the MPIC server queries for the CAA records for the
   domain if the caa-check request parameter is set to "true".

   On success, the response object contains a top-level success field
   set to true, and checks field which itself is an object of two
   fields:

   *  http-check (required, object): Contains an indentifer for
      validation result.

      -  success (required, boolean): Indicates the success of the HTTP
         challenge validation from each vantage point.

   *  caa-check (required, array of object): If caa-check is set to
      true, contains an array of identifier objects that the order
      pertains to.  Otherwise, it is omitted.

      -  success (required, boolean): Indicates the success of
         consistent CAA record response from each vantage point.

      -  caa (required, object): Contains caa object field as described
         [TODO add ref] in the above subsection.

   An example of a response for a succesful validation with caa-check
   set to false.

   {
    "success": true,
    "checks": {
     "http-check": {
       "success": true
     }
    }
   }

   An example of a response for a succesful validation with caa-check
   set to true.

   {
    "success": true,
    "checks": {
     "http-check": {
       "success": true
     },
     "caa-check": {
       "success": true,
       "caa": {
         "domain": "example.com",
         "records": ["AAVpc3N1ZWxldHNlbmNyeXB0Lm9yZw=="]
       }
     }
    }
   }

   On failure, the response object will have the top-level success field
   set to false, and the checks field describing corresponding error
   details specific to each validation method failure desscription.  A
   separate top-level error field describes the error.

   *  error (required, string): Error message.

   An example of a response where the validation failed with caa-check
   set to true, and the caa method being successful.

   {
    "success": false,
    "error": "HTTP method validation failed",
    "checks": {
      "http-check": {
       "success": false,
       "error": "HTTP ACME challenge validation failed at LIS"
      },
      "caa-check": {
        "success": true,
        "caa": {
         "domain": "example.com",
         "records": ["AAVpc3N1ZWxldHNlbmNyeXB0Lm9yZw=="]
       }
      }
    }
   }

   Similarly example of a response where caa-check set to true, and both
   methods fail.

{
 "success": false,
 "error": "HTTP and CAA methods both failed",
 "checks": {
   "http-check": {
    "success": false,
    "error": "HTTP ACME challenge validation failed at LIS"
   },
   "caa-check": {
     "success": false,
     "error": "LIS saw record 'xyz' on example.com which was not present from vantage point LIS"
   }
 }
}

3.3.  dns method

   Required request fields

   *  domain

   *  record-type

   *  prefix

   *  expected

   Optional

   *  caa Defaults to true.

   Response is same as with http.

4.  Operation

   TODO describe operation of each.

5.  Authentication

   Describe usage of Authorization header.

6.  Security Considerations

   TODO Security

7.  IANA Considerations

   This document has no IANA actions.

8.  Normative References

   [RFC2119]  Bradner, S., "Key words for use in RFCs to Indicate
              Requirement Levels", BCP 14, RFC 2119,
              DOI 10.17487/RFC2119, March 1997,
              <https://www.rfc-editor.org/rfc/rfc2119>.

   [RFC8174]  Leiba, B., "Ambiguity of Uppercase vs Lowercase in RFC
              2119 Key Words", BCP 14, RFC 8174, DOI 10.17487/RFC8174,
              May 2017, <https://www.rfc-editor.org/rfc/rfc8174>.

Acknowledgments

   TODO acknowledge.

Authors' Addresses

   Syed Suleman Ahmad
   Cloudflare
   Email: suleman@cloudflare.com


   Bas Westerbaan
   Cloudflare
   Email: bas@cloudflare.com
